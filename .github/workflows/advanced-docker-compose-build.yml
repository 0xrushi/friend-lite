name: Build and Deploy Advanced (Docker Compose)

on:
  workflow_dispatch:
    inputs:
      version:
        description: Optional version tag override (e.g. v1.2.3)
        required: false
  push:
    branches: [ "main", "feat/*" ]
    paths:
      - "*"
      - "backends/advanced/**"
      - ".github/workflows/advanced-docker-compose-build.yml"
    tags:
      - "v*"


permissions:
  contents: read
  packages: write
  actions: read

env:
  REGISTRY: ghcr.io

jobs:
  build-self-hosted:
    runs-on: [self-hosted, linux, x64]
    timeout-minutes: 60
    continue-on-error: true
    env:
      ADVANCED_ENV: ${{ secrets.ADVANCED_ENV }}
      RUNNER_FLAVOUR: self-hosted
    defaults:
      run:
        shell: bash
        working-directory: backends/advanced

    steps: &advanced_build_steps
      - name: Show selected runner
        run: echo "Workflow running on ${RUNNER_FLAVOUR} runner"
        working-directory: .

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy .env.template to .env
        run: |
          set -euo pipefail
          copy_env() {
            local dir="$1"
            local template="${dir}/.env.template"
            local target="${dir}/.env"
            if [ -f "$template" ]; then
              echo "Copying $template to $target"
              cp "$template" "$target"
            else
              echo "$template not found; skipping"
            fi
          }

          copy_env .
          copy_env ../../extras/asr-services
          copy_env ../../extras/speaker-recognition

      - name: Create .env from secret (if provided)
        if: env.ADVANCED_ENV != ''
        run: |
          echo "Writing .env from ADVANCED_ENV secret"
          printf "%s\n" "${ADVANCED_ENV}" > .env

      - name: Source .env (if present)
        run: |
          if [ -f .env ]; then
            set -a
            # shellcheck disable=SC1091
            source .env
            set +a
          else
            echo ".env not found; continuing"
          fi

      - name: Determine version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION="sha-${GITHUB_SHA::7}"
          fi
          echo "VERSION=$VERSION" | tee -a "$GITHUB_OUTPUT"

      - name: Build, push, and prune services sequentially
        env:
          OWNER: ${{ github.repository_owner }}
          VERSION: ${{ steps.version.outputs.VERSION }}
        run: |
          set -euo pipefail
          docker compose version
          OWNER_LC=$(echo "$OWNER" | tr '[:upper:]' '[:lower:]')
          service_specs=(
            "friend-backend|advanced-friend-backend|docker-compose.yml|."
            "workers|advanced-workers|docker-compose.yml|."
            "webui|advanced-webui|docker-compose.yml|."
            "parakeet-asr|parakeet-asr|../../extras/asr-services/docker-compose.yml|../../extras/asr-services"
            "speaker-service|speaker-recognition|../../extras/speaker-recognition/docker-compose.yml|../../extras/speaker-recognition"
          )

          for spec in "${service_specs[@]}"; do
            IFS='|' read -r svc svc_repo compose_file project_dir <<< "$spec"

            echo "::group::Building $svc_repo"
            if [ "$compose_file" = "docker-compose.yml" ] && [ "$project_dir" = "." ]; then
              docker compose build --pull "$svc"
            else
              docker compose -f "$compose_file" --project-directory "$project_dir" build "$svc"
            fi

            img_id=$(docker images --format "{{.ID}}" --filter "reference=${svc_repo}:*" | head -n1)
            if [ -z "${img_id:-}" ]; then
              echo "Skipping $svc_repo (no built image found after build)"
              echo "::endgroup::"
              continue
            fi

            target_image="$REGISTRY/$OWNER_LC/$svc_repo:$VERSION"
            echo "Tagging $img_id as $target_image"
            docker tag "$img_id" "$target_image"

            echo "Pushing $target_image"
            docker push "$target_image"
            echo "Removing local image tags for $svc_name"
            docker image rm -f "$target_image" || true
            docker image rm -f "$img_id" || true
            echo "Pruning Docker builder cache and unused data"
            docker builder prune -af || true
            docker system prune -af || true
            echo "::endgroup::"
          done

  build-default:
    needs: build-self-hosted
    if: needs.build-self-hosted.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      ADVANCED_ENV: ${{ secrets.ADVANCED_ENV }}
      RUNNER_FLAVOUR: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backends/advanced
    steps: *advanced_build_steps
